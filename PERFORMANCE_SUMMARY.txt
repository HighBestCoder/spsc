// 缓存行大小性能测试总结
// ===============================

/*
基于Intel Xeon Platinum 8370C的测试结果:

性能排名 (吞吐量):
1. 128字节: ~170M ops/sec (最佳性能)
2. 64字节:  ~144M ops/sec (次佳性能)  
3. 256字节: ~122M ops/sec (性能下降)
4. 32字节:  ~109M ops/sec (性能较差)

内存使用:
- 32字节:  96字节对象大小
- 64字节:  192字节对象大小  ⭐ 推荐
- 128字节: 384字节对象大小 ⭐ 高性能推荐
- 256字节: 768字节对象大小

稳定性 (变异系数):
- 128字节: 3.19% (最稳定)
- 64字节:  4.45% (很稳定)
- 32字节:  6.51% (一般)
- 256字节: 7.84% (最不稳定)

结论和建议:
===========
1. 最佳性能配置: 使用128字节缓存行
   - 最高吞吐量
   - 最低延迟抖动
   - 适合对性能要求极高的场景

2. 平衡配置: 使用64字节缓存行  
   - 性能优秀 (比128字节仅低15%)
   - 内存使用少50%
   - 最佳性能/内存比率
   - 推荐用于生产环境

3. 避免使用:
   - 32字节: 可能存在false sharing
   - 256字节: 内存浪费严重，性能提升有限

技术原理:
========
- 32字节: 小于典型CPU缓存行(64字节)，可能导致false sharing
- 64字节: 匹配大多数现代CPU的L1缓存行大小，性能优秀
- 128字节: 提供额外的缓存行间隔，进一步减少竞争
- 256字节: 过度对齐，浪费内存带宽和缓存空间

代码使用示例:
============
// 推荐配置 - 平衡性能和内存
using RecommendedQueue = SPSCQueueSoftArray<int, 64>;

// 高性能配置 - 最佳性能
using HighPerformanceQueue = SPSCQueueSoftArray<int, 128>;

// 创建队列
auto* queue = RecommendedQueue::create(1024);
// ... 使用队列
RecommendedQueue::destroy(queue);
*/